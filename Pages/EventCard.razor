@page "/event-card/{eventId:int}"
@using EventEaseApp.Services;
@using EventEaseApp.Data.Models;
@inject IEventService _eventService;
@inject ICurrentUserService _currentUserService;
@inject IUserService _userService;
@inject NavigationManager Navigation;

<div class="container">
    <h1>Event Details</h1>
    <div class="detail"><span class="label">Name:</span> <span class="value">@SelectedEventObj.Name</span></div>
    <div class="detail"><span class="label">Date:</span> <span class="value">@SelectedEventObj.Date</span></div>
    <div class="detail"><span class="label">Location:</span> <span class="value">@SelectedEventObj.Location</span></div>
    <div class="detail"><span class="label">Description:</span> <span class="value">@SelectedEventObj.Description</span></div>
    <div class="detail"><span class="label">Ticket Price:</span> <span class="value">$@SelectedEventObj.TicketPrice</span></div>
    <a href="/event-card-list" class="back-button">Back</a>
    
    @if(IsRegisteredForEvent) {
        <button class="back-button" @onclick="UnsignButtonClicked">
            Unsign from the event
        </button>
    } else {
        <button class="back-button" @onclick="SignUpButtonClicked">
            Sign up to the event
        </button>
    }

    <br/>
    <br/>
    <p class="label">Attendees:</p>
    <ul>
        @foreach(var item in EventAttendees){
            <li>@item.FullName</li>
        }
        
    </ul>
</div>

@code{
    [Parameter]
    public int eventId { get; set; }
    public Event SelectedEventObj { get; set; }
    public bool IsRegisteredForEvent { get; set; } = false;
    public RegisteredUser CurrentUser { get; set; }
    public List<RegisteredUser> EventAttendees { get; set; } = new();

    protected override Task OnParametersSetAsync()
    {
        SelectedEventObj = _eventService.GetById(eventId);
        CurrentUser = _currentUserService.GetCurrentUser();
        IsRegisteredForEvent = SelectedEventObj.AttendeeIds.Contains(CurrentUser?.Id ?? -1);
        EventAttendees =  _userService.GetUserListById(SelectedEventObj.AttendeeIds);

        return Task.CompletedTask;
    }

    public void SignUpButtonClicked()
    {
        if (!IsRegisteredForEvent && CurrentUser != null)
        {
            _eventService.AddAttendee(eventId, CurrentUser.Id);
            IsRegisteredForEvent = true;
            EventAttendees =  _userService.GetUserListById(SelectedEventObj.AttendeeIds);
        }
        if (CurrentUser == null)
        {
            Navigation.NavigateTo("/registration");
        }
    }

    public void UnsignButtonClicked()
    {
        if(IsRegisteredForEvent && CurrentUser != null)
        {
            _eventService.RemoveAttendee(eventId, CurrentUser.Id);
            IsRegisteredForEvent = false;
            EventAttendees =  _userService.GetUserListById(SelectedEventObj.AttendeeIds);
        }
    }
}


<style>
    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f9;
    }

    .container {
        max-width: 600px;
        margin: 50px auto;
        padding: 20px;
        background: #ffffff;
        box-shadow: 0px 0px 10px rgba(0, 0, 0, 0.1);
        border-radius: 8px;
    }

    h1 {
        font-size: 24px;
        color: #333;
    }

    .detail {
        margin-bottom: 15px;
    }

    .label {
        font-weight: bold;
    }

    .value {
        color: #555;
    }

    .back-button {
        display: inline-block;
        margin-top: 20px;
        padding: 10px 20px;
        background-color: #4caf50;
        color: white;
        text-decoration: none;
        border-radius: 5px;
    }
</style>
